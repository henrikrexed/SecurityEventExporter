version: '3.8'

services:
  # OpenTelemetry Collector with Security Event Exporter
  otelcol-security:
    build:
      context: .
      dockerfile: Dockerfile
    image: hrexed/otel-collector-sec-event:latest
    container_name: otelcol-security
    ports:
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiver
      - "8888:8888"   # Prometheus metrics
      - "8889:8889"   # Prometheus metrics (alternative)
      - "13133:13133" # Health check
      - "1777:1777"   # pprof
      - "55679:55679" # zpages
    volumes:
      - ./collector-config.yaml:/etc/otelcol/config.yaml:ro
      - ./logs:/var/log/security:ro
      - /var/log/auth.log:/var/log/auth.log:ro
    environment:
      - OTEL_API_KEY=${OTEL_API_KEY}
      - SECURITY_API_TOKEN=${SECURITY_API_TOKEN}
      - SECURITY_API_KEY=${SECURITY_API_KEY}
      - HOSTNAME=${HOSTNAME:-otelcol-security}
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:13133/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - otel-network

  # Mock security service for testing
  mock-security-service:
    image: mockserver/mockserver:5.15.0
    container_name: mock-security-service
    ports:
      - "1080:1080"
    environment:
      - MOCKSERVER_INITIALIZATION_JSON_PATH=/config/init.json
    volumes:
      - ./test/mock-security-service.json:/config/init.json:ro
    networks:
      - otel-network

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./test/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    networks:
      - otel-network

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-storage:/var/lib/grafana
      - ./test/grafana/dashboards:/var/lib/grafana/dashboards:ro
      - ./test/grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - otel-network

  # Jaeger for trace visualization
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: jaeger
    ports:
      - "16686:16686"
      - "14250:14250"
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - otel-network

networks:
  otel-network:
    driver: bridge

volumes:
  grafana-storage:
